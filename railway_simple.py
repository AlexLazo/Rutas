#!/usr/bin/env python3
"""
Inicio H√çBRIDO para Railway - Intenta usar PORT pero con respaldo
"""

import os
import sys
from app import app

# SOLUCI√ìN H√çBRIDA: Intentar Railway PORT, si falla usar puerto fijo
def get_safe_port():
    # Obtener la variable PORT
    port_var = os.environ.get('PORT')
    
    print(f"ÔøΩ Variable PORT detectada: '{port_var}'")
    
    # Si PORT no existe, usar puerto por defecto
    if port_var is None:
        print("‚ö†Ô∏è PORT no definida, usando 5000")
        return 5000
    
    # Si PORT es literalmente '$PORT', usar puerto por defecto  
    if port_var == '$PORT':
        print("‚ö†Ô∏è PORT es literalmente '$PORT', usando 5000")
        return 5000
    
    # Si PORT est√° vac√≠a, usar puerto por defecto
    if port_var.strip() == '':
        print("‚ö†Ô∏è PORT est√° vac√≠a, usando 5000")
        return 5000
    
    # Intentar convertir PORT a n√∫mero
    try:
        port_num = int(port_var)
        if 1000 <= port_num <= 65535:
            print(f"‚úÖ Usando puerto Railway: {port_num}")
            return port_num
        else:
            print(f"‚ö†Ô∏è Puerto {port_num} fuera de rango, usando 5000")
            return 5000
    except:
        print(f"‚ö†Ô∏è No se puede convertir '{port_var}' a n√∫mero, usando 5000")
        return 5000

# Obtener puerto seguro
PORT = get_safe_port()

print(f"üöÄ Iniciando app en puerto: {PORT}")

# Ejecutar la aplicaci√≥n
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=PORT, debug=False)
