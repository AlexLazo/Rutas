#!/usr/bin/env python3
"""
Script de inicio robusto para Railway
Maneja variables de entorno y configuraci√≥n espec√≠fica
NUEVA VERSI√ìN: Soluci√≥n para el error $PORT
"""

import os
import sys

# Importar nuevo m√≥dulo de correcci√≥n para $PORT
try:
    from railway_fix import fix_railway_port, print_environment
    RAILWAY_FIX_AVAILABLE = True
    print("‚úÖ M√≥dulo railway_fix importado correctamente")
except ImportError:
    RAILWAY_FIX_AVAILABLE = False
    print("‚ö†Ô∏è M√≥dulo railway_fix no disponible, usando l√≥gica b√°sica")

def setup_railway_environment():
    """Configurar variables de entorno para Railway"""
    
    # SOLUCI√ìN MEJORADA para el problema de $PORT
    if RAILWAY_FIX_AVAILABLE:
        # Usar la soluci√≥n robusta del m√≥dulo railway_fix
        print("üõ†Ô∏è Aplicando correcci√≥n avanzada para $PORT")
    else:
        # L√≥gica b√°sica por si el m√≥dulo no est√° disponible
        port = os.environ.get('PORT', '5000')
        if port == '$PORT' or not port.isdigit():
            print(f"‚ö†Ô∏è PORT era '{port}' (literalmente). Usando 5000 como valor por defecto.")
    
    # Establecer modo producci√≥n en Railway
    if 'RAILWAY_ENVIRONMENT' in os.environ:
        os.environ['FLASK_ENV'] = 'production'
        print("üöÇ Detectado Railway - Modo producci√≥n activado")
    
    # Configurar zona horaria
    if 'TZ' not in os.environ:
        os.environ['TZ'] = 'America/Guatemala'
    
    print("‚úÖ Variables de entorno configuradas para Railway")

def main():
    """Funci√≥n principal"""
    print("üöÇ Iniciando aplicaci√≥n en Railway...")
    
    # Configurar entorno
    setup_railway_environment()
    
    # Importar y ejecutar la aplicaci√≥n
    try:
        from app import app
        
        # SOLUCI√ìN DEFINITIVA: Usar el m√≥dulo de correcci√≥n especializado
        if RAILWAY_FIX_AVAILABLE:
            # Obtener puerto usando la soluci√≥n robusta
            port = fix_railway_port()
            print(f"üîí Puerto validado por railway_fix: {port}")
        else:
            # L√≥gica de respaldo m√°s b√°sica
            port_str = os.environ.get('PORT', '5000')
            if port_str == '$PORT' or not port_str.isdigit():
                port = 5000
                print(f"‚ö†Ô∏è Valor inv√°lido en PORT: '{port_str}'. Usando puerto 5000 por defecto.")
            else:
                port = int(port_str)
        
        debug_mode = os.environ.get('FLASK_ENV') != 'production'
        
        print(f"üåê Servidor iniciando en puerto: {port}")
        print(f"üîß Debug mode: {debug_mode}")
        
        # Ejecutar aplicaci√≥n - CON PUERTO GARANTIZADO
        app.run(
            debug=debug_mode,
            host='0.0.0.0', 
            port=port,
            use_reloader=False  # Evitar problemas en Railway
        )
        
    except Exception as e:
        print(f"‚ùå Error iniciando aplicaci√≥n: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
